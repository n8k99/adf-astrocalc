from datetime import *
import ephem
"""if I am going to package this for anyone else to use, i am going to need to package pyephem as well"""


#define days & years
today = date.today()  
working_date = datetime.today()
#define solstices & equinoxes
last_solstice = ephem.previous_solstice(today) #calculate solstice date
last_solstice = last_solstice.datetime() #convert to datetime

previous_equinox = ephem.previous_equinox(today) #calculate equinox date
previous_equinox = previous_equinox.datetime() #convert to datetime

next_solstice = ephem.next_solstice(today) #calculate solstice date
next_solstice = next_solstice.datetime() #convert to datetime

next_equinox = ephem.next_equinox(today) #calculate equinox date
next_equinox = next_equinox.datetime() #convert to datetime

#calculate cross-quarter high days
def cross_quarter(last, next):
    midpoint=abs((next-last))/2
    midpoint=next-midpoint
    if last < midpoint < next: #this insures that midpoint falls between
        return midpoint        #the two endpoints 
    else:
        midpoint=abs((next-last))/2
        midpoint=last-midpoint
        return midpoint    

a_crossquarter = cross_quarter(last_solstice, previous_equinox)
b_crossquarter = cross_quarter(previous_equinox, next_solstice)
c_crossquarter = cross_quarter(next_solstice, next_equinox)


'''This section is meant to lay down ground work to establishing the origin
date for the Abysmal calendar system. For the purpose of clarity, Winter
Solstice is defined from a Northern Hemisperic perspective according to the Abysmal Calendar system the Winter Solstice of 2012 marks the beginning of the calendar
the first day of the year ( 0~0~0) immediately follows that day. Every Year on the Winter Solstice starts a new year
there is no date for that day other than Winter Solstice (number)
'''
#establish date of origin 
pin = ephem.next_solstice('2012/12') #calculate first New Year's Day off Winter Solstice 2012
strip_pin = pin.datetime() #convert to datetime for calculations

# determine Winter Solstice for year
def Winter_Solstice(date):
    year = date.year 
    month = date.month
    if (date.month <=7):
        month = '12'
        year = str(date.year)
        date = year+'/'+month
    else:
        null
    Winter_Solstice = ephem.next_solstice(date)
    Winter_Solstice = Winter_Solstice.datetime()
    return Winter_Solstice

Winter_Solstice = Winter_Solstice(today) #sets date for this year's Winter Solstice
#print "First: " + str(Winter_Solstice) #prints out Winter Solstice date.  

# establish rules for counting years
def abysmal_year():
    abysmal_year = (Winter_Solstice.year - strip_pin.year) - 1 
    return abysmal_year

def celebrate():
    if next_solstice < next_equinox:
        if today < b_crossquarter.date():
            return b_crossquarter
        else:
            return next_solstice
    else:
        if today < b_crossquarter.date():
            return b_crossquarter
        else:
             return next_equinox           
next_high_date = celebrate()



# define zodiac sign for date
zodiacs = [(120, 'Capricorn'), (218, 'Aquarius'), (320, 'Pisces'), (420, 'Aries'), (521, 'Taurus'),
           (621, 'Gemini'), (722, 'Cancer'), (823, 'Leo'), (923, 'Virgo'), (1023, 'Libra'),
           (1122, 'Scorpio'), (1222, 'Sagittarius'), (1231, 'Capricorn')]

# define Ogham calendar sign for date
ogham_signs = [(119,'Birch'),(217,'Rowan'),(317,'Ash'),(414,'Alder'),(512,'Willow'),(609,'Hawthorn'),(717,'Oak'),
                (804,'Holly'),(901,'Hazel'),(929,'Apple'),(1027,'Ivy'),(1124,'Broom'),(1221,'Elder'),(1223,'Pine'),
                (1231,'Birch')]

# define planet for day of the week
seven_planets = [(0,'Moon'),(1,'Mars'),(2,'Mercury'),(3,'Jupiter'),(4,'Venus'),(5,'Saturday'),(6,'Sun')]

# define high days
high_days = [(2, 'The February Feast'), (3,'The Spring Feast'),(5,'The May Feast'),(6,'The Summer Feast'),
             (8, 'The August Feast'),(9,'The Fall Feast'),(11,'The Novemeber Feast'),(12,'The Winter Feast')]
def get_high_day(date):
    month_number = int(date.month)
    for z in high_days:
        if month_number == z[0]:
            return z[1]

# fetch planet name for day of week 
def get_seventh_sign(date):
    day_of_week = working_date.weekday()
    for z in seven_planets:
        if day_of_week == z[0]:
            return z[1]

#iterate over a dictionary list 
def number_code_date(date,x):
    date_number = int("".join((str(date.date().month), '%02d' % date.date().day)))
    for z in x:
        if date_number < z[0]:
            return z[1]  
            
#calculates the time between two dates.
def daily_difference(first, second):
    #calculate number of days
    x = abs(second- first)
    #remove timedelta stamp
    daily_difference = x.days
    #produce results
    return daily_difference

#get abysmal_month
def get_abysmal_month(y):
    abysmal_month = (daily_difference(strip_pin, y))/28
    return abysmal_month

def get_Abysmal_Date(y):
    if y == Winter_Solstice:
        return "New Year's Day"
    else:
        year  = abysmal_year()
        month = get_abysmal_month(y)
        x =  (daily_difference(strip_pin, y))
        day = int((x/28.0 - month)*28)
        if month >= 13:
            month = month -13
        else:
            month = month
    return "Y"+str(year) +"~M"+str(month)+"~D"+str(day)

#used to calaculate days passed or days to pass between high day and today
def passage(first, today):
    #determine if day is passed or coming
    if (first < today):
        return "days since:" + str(daily_difference(first, today))
    elif (today < first):
        return  "days until:" + str(daily_difference(today, first))
    elif (today == first):
        return "******** This is today. *********"
    else:
        return "The Sky is falling."    

'''sorts the labelled days into High Days'''
# provide a label for the astronomical point
def label_point(x):
    if x.month == 2:
        label = "The February Feast"
        return label
    elif x.month == 3:    
        label = "The Spring Feast"
        return label
    elif x.month == 5:
        label = "The May Feast"
        return label
    elif x.month == 6:
        label = "The Summer Feast"
        return label
    elif x.month == 8:
        label = "The Autumn Feast"        
        return label
    elif x.month == 9:
        label = "The Fall Feast"
        return label
    elif x.month == 11:
        label = "The Novemeber Feast"
        return label
    elif x.month == 12:            
        label = "The Winter Feast"
        return label
    else:
        today = get_Abysmal_Date(working_date)
        seventh_sign = get_seventh_sign(working_date)
        ogham_sign = number_code_date(working_date, ogham_signs)
        sun_sign = number_code_date(working_date, zodiacs)
        return today + " " + seventh_sign + " " + sun_sign + " " + ogham_sign 


def sort_days():
    a = previous_equinox.date()
    b = a_crossquarter.date()
    c = last_solstice.date()
    d = b_crossquarter.date()
    e = next_equinox.date()
    f = c_crossquarter.date()
    g = next_solstice.date()
    h = today
    order = sorted([a,b,c,d,e,f,g,h])
    return order
list_of_dates = sort_days() #produces ordered list of calculated days


# big table of dates, sorted and labelled with time passage
for n in range(len(list_of_dates)):
    print list_of_dates[n], passage(list_of_dates[n], today), label_point(list_of_dates[n]) 
  
